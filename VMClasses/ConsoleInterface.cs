namespace ClassLibrary2;

public class ConsoleInterface(VendingMachine vendingMachine) : IUserInterface
{
    
    private readonly VendingMachine _vendingMachine = vendingMachine;
    
    public void Run()
    {
        while (true)
        {
            try
            {
                ShowWelcomeMessage();
                var choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        RunCustomerMode();
                        break;
                    case "2":
                        RunAdminMode();
                        break;
                    case "0":
                        DisplayMessage("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                        return;
                    default:
                        DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                        break;
                }

                Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                Console.ReadKey();
            }
            catch (Exception ex)
            {
                DisplayError($"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex.Message}");
            }
        }
    } 
    
    private void RunCustomerMode()
    {
        while (true)
        {
            Console.Clear();
            Console.WriteLine("=== –†–ï–ñ–ò–ú –ü–û–ö–£–ü–ê–¢–ï–õ–Ø ===");
            Console.WriteLine($"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {_vendingMachine.CurrentBalance:C}");
            Console.WriteLine("\n1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã");
            Console.WriteLine("2. –í—Å—Ç–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É");
            Console.WriteLine("3. –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä");
            Console.WriteLine("4. –í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏");
            Console.WriteLine("0. –ù–∞–∑–∞–¥");

            var choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    DisplayProducts(_vendingMachine.GetAllProducts());
                    break;
                case "2":
                    var coin = GetCoinInput();
                    if (coin > 0)
                    {
                        var newBalance = _vendingMachine.InsertCoin(coin);
                        DisplayMessage($"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {newBalance:C}");
                    }
                    break;
                case "3":
                    DisplayProducts(_vendingMachine.GetAllProducts());
                    var productId = GetProductSelection();
                    if (int.TryParse(productId, out int id) && id > 0)
                    {
                        var (success, product, error) = _vendingMachine.PurchaseProduct(id - 1);
                        if (success)
                        {
                            DisplayMessage($"–¢–æ–≤–∞—Ä '{product.Name}' –≤—ã–¥–∞–Ω!");
                            if (_vendingMachine.CurrentBalance > 0)
                            {
                                var change = _vendingMachine.ReturnChange();
                                DisplayChange(change);
                            }
                        }
                        else
                        {
                            DisplayError(error);
                        }
                    }
                    break;
                case "4":
                    if (_vendingMachine.CurrentBalance > 0)
                    {
                        var change = _vendingMachine.ReturnChange();
                        DisplayChange(change);
                        DisplayMessage("–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã");
                    }
                    else
                    {
                        DisplayMessage("–ù–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞");
                    }
                    break;
                case "0":
                    if (_vendingMachine.CurrentBalance > 0)
                    {
                        var change = _vendingMachine.ReturnChange();
                        DisplayChange(change);
                    }
                    return;
                default:
                    DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                    break;
            }

            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }
    }

    private void RunAdminMode()
    {
        var role = AuthenticateUser();
        
        if (role != UserRole.Administrator)
        {
            DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
            return;
        }

        while (true)
        {
            Console.Clear();
            ShowAdminMenu();
            var choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤
                    DisplayProducts(_vendingMachine.GetAllProducts());
                    break;
                case "2":
                    // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    RestockExistingProducts();
                    break;
                case "3":
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    AddNewProduct();
                    break;
                case "4":
                    // –°–±–æ—Ä –≤—ã—Ä—É—á–∫–∏
                    var revenue = _vendingMachine.CollectRevenue();
                    DisplayMessage($"–í—ã—Ä—É—á–∫–∞ —Å–æ–±—Ä–∞–Ω–∞: {revenue:C}");
                    break;
                case "5":
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    var (totalRevenue, totalSales) = _vendingMachine.GetStatistics();
                    DisplayMessage($"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {totalRevenue:C}");
                    DisplayMessage($"–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {totalSales}");
                    DisplayMessage($"–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {_vendingMachine.GetAvailableSlots()}");
                    break;
                case "0":
                    return;
                default:
                    DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä");
                    break;
            }

            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            Console.ReadKey();
        }
    }

    private void RestockExistingProducts()
    {
        DisplayProducts(_vendingMachine.GetAllProducts());
        var productId = GetProductSelection();
        if (int.TryParse(productId, out int id) && id > 0)
        {
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ");
            if (int.TryParse(Console.ReadLine(), out int quantity) && quantity > 0)
            {
                var success = _vendingMachine.RestockProduct(id - 1, quantity);
                if (success)
                    DisplayMessage($"–¢–æ–≤–∞—Ä –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {quantity} –µ–¥–∏–Ω–∏—Ü");
                else
                    DisplayError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
            }
            else
            {
                DisplayError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ");
            }
        }
    }

    private void AddNewProduct()
    {
        Console.WriteLine("\n=== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –¢–û–í–ê–†–ê ===");
    
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ");
        var name = Console.ReadLine();
    
        if (string.IsNullOrWhiteSpace(name))
        {
            DisplayError("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            return;
        }

        Console.Write("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: ");
        if (!int.TryParse(Console.ReadLine(), out int price) || price <= 0)
        {
            DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã");
            return;
        }

        Console.Write("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ");
        if (!int.TryParse(Console.ReadLine(), out int quantity) || quantity <= 0)
        {
            quantity = 1; 
        }

        var success = _vendingMachine.AddProduct(name, price, quantity);
        if (success)
            DisplayMessage($"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");
        else
            DisplayError("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤.");
    }
    
    public void ShowWelcomeMessage()
    {
        Console.Clear();
        Console.WriteLine("=== –í–ï–ù–î–ò–ù–ì–û–í–´–ô –ê–í–¢–û–ú–ê–¢ ===");
        Console.WriteLine("1. –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤");
        Console.WriteLine("2. –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        Console.WriteLine("0. –í—ã—Ö–æ–¥");
    }

    public void DisplayProducts(Product[] products)
    {
        if (_vendingMachine.NumberOfProducts() == 0)
        {
            Console.WriteLine("–°–µ–π—á–∞—Å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç:(");
            return;
        }
        Console.WriteLine("\n=== –î–û–°–¢–£–ü–ù–´–ï –¢–û–í–ê–†–´ ===");
        for (int Id = 0; Id < _vendingMachine.NumberOfProducts(); Id++)
        {
            Product product = _vendingMachine.GetProduct(Id);
            Console.WriteLine($"{Id + 1}. {product.Name} - {product.Price:C} (–æ—Å—Ç–∞–ª–æ—Å—å: {_vendingMachine.GetCountOfProducts(product)})");
        }
    }

    public void DisplayMessage(string message)
    {
        Console.WriteLine($"üí° {message}");
    }

    public void DisplayError(string error)
    {
        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {error}");
    }

    public int GetCoinInput()
    {
        Console.WriteLine($"–í–Ω–∏–º–∞–Ω–∏–µ! –ê–≤—Ç–æ–º–∞—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–º–∏–Ω–∞–ª—ã: {CurrencyValue.AllToString}");
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª –º–æ–Ω–µ—Ç—ã (0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ");
        if (int.TryParse(Console.ReadLine(), out var coin) && CurrencyValue.IsValid(coin))
            return coin;
        
        DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–Ω–µ—Ç—ã");
        return 0;
    }

    public string GetProductSelection()
    {
        Console.Write("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä (ID): ");
        return Console.ReadLine();
    }

    public UserRole AuthenticateUser()
    {
        Console.Write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (Enter –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è): ");
        var password = Console.ReadLine();
        
        return password switch
        {
            "admin" => UserRole.Administrator,
            _ => UserRole.Customer
        };
    }

    public void DisplayChange(Dictionary<decimal, int> change)
    {
        if (change == null || !change.Any())
        {
            Console.WriteLine("–°–¥–∞—á–∞: –Ω–µ—Ç");
            return;
        }

        Console.WriteLine("–í–∞—à–∞ —Å–¥–∞—á–∞:");
        foreach (var coin in change.OrderByDescending(x => x.Key))
        {
            Console.WriteLine($"  {coin.Key:C} √ó {coin.Value}");
        }
    }

    public void ShowAdminMenu()
    {
        Console.WriteLine("\n=== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† ===");
        Console.WriteLine("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã");
        Console.WriteLine("2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã");
        Console.WriteLine("3. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä");
        Console.WriteLine("4. –°–æ–±—Ä–∞—Ç—å –≤—ã—Ä—É—á–∫—É");
        Console.WriteLine("5. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É");
        Console.WriteLine("0. –ù–∞–∑–∞–¥");
    }
    
}